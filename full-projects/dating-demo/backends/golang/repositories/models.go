// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package repositories

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"
)

type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Gender, nil
}

type Profile struct {
	ID        int32          `json:"id"`
	Userid    sql.NullInt32  `json:"userid"`
	Bio       sql.NullString `json:"bio"`
	CreatedAt time.Time      `json:"created_at"`
	UpdatedAt sql.NullTime   `json:"updated_at"`
	Picture   sql.NullString `json:"picture"`
}

type ProfileTag struct {
	ProfileID int32 `json:"profile_id"`
	TagID     int32 `json:"tag_id"`
}

type SwipeHistory struct {
	ID               int32     `json:"id"`
	TriggeringUserID int32     `json:"triggering_user_id"`
	ProfileID        int32     `json:"profile_id"`
	Rejected         bool      `json:"rejected"`
	CreatedAt        time.Time `json:"created_at"`
}

type Tag struct {
	ID   int32  `json:"id"`
	Name string `json:"name"`
}

type User struct {
	ID        int32        `json:"id"`
	Name      string       `json:"name"`
	Gender    Gender       `json:"gender"`
	Age       int32        `json:"age"`
	Email     string       `json:"email"`
	Password  string       `json:"password"`
	CreatedAt time.Time    `json:"created_at"`
	UpdatedAt sql.NullTime `json:"updated_at"`
	Location  int32        `json:"location"`
}

type UserTag struct {
	UserID int32 `json:"user_id"`
	TagID  int32 `json:"tag_id"`
}
