// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0

package repositories

import (
	"database/sql"
	"database/sql/driver"
	"fmt"
	"time"

	"github.com/google/uuid"
)

type Gender string

const (
	GenderMale   Gender = "male"
	GenderFemale Gender = "female"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type NullGender struct {
	Gender Gender
	Valid  bool // Valid is true if String is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullGender) Scan(value interface{}) error {
	if value == nil {
		ns.Gender, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.Gender.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullGender) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return ns.Gender, nil
}

type Profile struct {
	ID        uuid.UUID
	Userid    uuid.NullUUID
	Bio       sql.NullString
	CreatedAt time.Time
	UpdatedAt sql.NullTime
	Picture   sql.NullString
}

type ProfileTag struct {
	ProfileID uuid.UUID
	TagID     uuid.UUID
}

type SwipeHistory struct {
	ID               uuid.UUID
	TriggeringUserID uuid.UUID
	ReceivingUserID  uuid.UUID
	Action           string
	CreatedAt        time.Time
}

type Tag struct {
	ID   uuid.UUID
	Name string
}

type User struct {
	ID        uuid.UUID
	Name      string
	Gender    NullGender
	Age       sql.NullInt16
	Email     string
	Password  string
	CreatedAt time.Time
	UpdatedAt sql.NullTime
}

type UserTag struct {
	UserID uuid.UUID
	TagID  uuid.UUID
}
